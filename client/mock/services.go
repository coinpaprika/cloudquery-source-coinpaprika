// Code generated by MockGen. DO NOT EDIT.
// Source: ../services.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	coinpaprika "github.com/coinpaprika/coinpaprika-api-go-client/v2/coinpaprika"
	gomock "github.com/golang/mock/gomock"
)

// MockTickersService is a mock of TickersService interface.
type MockTickersService struct {
	ctrl     *gomock.Controller
	recorder *MockTickersServiceMockRecorder
}

// MockTickersServiceMockRecorder is the mock recorder for MockTickersService.
type MockTickersServiceMockRecorder struct {
	mock *MockTickersService
}

// NewMockTickersService creates a new mock instance.
func NewMockTickersService(ctrl *gomock.Controller) *MockTickersService {
	mock := &MockTickersService{ctrl: ctrl}
	mock.recorder = &MockTickersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickersService) EXPECT() *MockTickersServiceMockRecorder {
	return m.recorder
}

// GetHistoricalTickersByID mocks base method.
func (m *MockTickersService) GetHistoricalTickersByID(coinID string, options *coinpaprika.TickersHistoricalOptions) ([]*coinpaprika.TickerHistorical, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalTickersByID", coinID, options)
	ret0, _ := ret[0].([]*coinpaprika.TickerHistorical)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalTickersByID indicates an expected call of GetHistoricalTickersByID.
func (mr *MockTickersServiceMockRecorder) GetHistoricalTickersByID(coinID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalTickersByID", reflect.TypeOf((*MockTickersService)(nil).GetHistoricalTickersByID), coinID, options)
}

// MockExchangesService is a mock of ExchangesService interface.
type MockExchangesService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangesServiceMockRecorder
}

// MockExchangesServiceMockRecorder is the mock recorder for MockExchangesService.
type MockExchangesServiceMockRecorder struct {
	mock *MockExchangesService
}

// NewMockExchangesService creates a new mock instance.
func NewMockExchangesService(ctrl *gomock.Controller) *MockExchangesService {
	mock := &MockExchangesService{ctrl: ctrl}
	mock.recorder = &MockExchangesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangesService) EXPECT() *MockExchangesServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockExchangesService) List(options *coinpaprika.ExchangesOptions) ([]*coinpaprika.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", options)
	ret0, _ := ret[0].([]*coinpaprika.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExchangesServiceMockRecorder) List(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExchangesService)(nil).List), options)
}

// MockCoinsService is a mock of CoinsService interface.
type MockCoinsService struct {
	ctrl     *gomock.Controller
	recorder *MockCoinsServiceMockRecorder
}

// MockCoinsServiceMockRecorder is the mock recorder for MockCoinsService.
type MockCoinsServiceMockRecorder struct {
	mock *MockCoinsService
}

// NewMockCoinsService creates a new mock instance.
func NewMockCoinsService(ctrl *gomock.Controller) *MockCoinsService {
	mock := &MockCoinsService{ctrl: ctrl}
	mock.recorder = &MockCoinsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinsService) EXPECT() *MockCoinsServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCoinsService) List() ([]*coinpaprika.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*coinpaprika.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCoinsServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCoinsService)(nil).List))
}
